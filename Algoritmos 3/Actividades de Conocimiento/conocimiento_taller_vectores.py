# -*- coding: utf-8 -*-
"""Conocimiento taller vectores.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1EXwQweKBnl2uyeFI2ZUJyJVwE_EgMN1E

Taller Búsqueda en vectores
"""

""" 1. """
# Función que implementa la búsqueda secuencial en una lista de cédulas.
# Lista de cédulas de personas que pueden votar
# Cédula a buscar
# Verificar si la cédula se encuentra en la lista

def sequential_search(cedulas, cedula_a_buscar):
    n = len(cedulas)
    for i in range(n):
        if cedulas[i] == cedula_a_buscar:
            return True
    return False

def main():
    cedulas_validas = [12345678, 23456789, 34567890, 45678901, 56789012]
    cedula_buscada = 12345678
    if sequential_search(cedulas_validas, cedula_buscada):
        print(f"La persona con cédula {cedula_buscada} puede votar.")
    else:
        print(f"La persona con cédula {cedula_buscada} no puede votar.")
if __name__ == "__main__":
    main()



# 2. """programa interfaz carrito de las compras"""

from tkinter import *
from tkinter import ttk

ventana = Tk()
ventana.title("Tienda")

etiqueta_articulo = Label(ventana, text="Artículo:")
etiqueta_articulo.grid(column=0, row=0)
entrada_articulo = Entry(ventana)
entrada_articulo.grid(column=1, row=0)

etiqueta_precio = Label(ventana, text="Precio:")
etiqueta_precio.grid(column=0, row=1)
entrada_precio = Entry(ventana)
entrada_precio.grid(column=1, row=1)

articulos = {}

def agregar_articulo():
    articulo = entrada_articulo.get()
    precio = float(entrada_precio.get())
    articulos[articulo] = precio
    entrada_articulo.delete(0, END)
    entrada_precio.delete(0, END)

boton_agregar = Button(ventana, text="Agregar", command=agregar_articulo)
boton_agregar.grid(column=1, row=2)

def calcular_total():
    total = 0
    for precio in articulos.values():
        total += precio
    return total

def mostrar_compra():
    # Ocultar elementos de la ventana inicial
    etiqueta_articulo.grid_remove()
    entrada_articulo.grid_remove()
    etiqueta_precio.grid_remove()
    entrada_precio.grid_remove()
    boton_agregar.grid_remove()
    boton_compra.grid_remove()

    # Crear tabla de resultados
    tabla = ttk.Treeview(ventana, columns=("Artículo", "Precio"), show="headings")
    tabla.grid(column=0, row=0, columnspan=2)

    tabla.heading("Artículo", text="Artículo")
    tabla.heading("Precio", text="Precio")

    for articulo, precio in articulos.items():
        tabla.insert("", "end", values=(articulo, f"{precio:.2f}"))
        # Agregar una línea visual para dividir las filas en la columna "Artículo"
        tabla.insert("", "end", values=("", "-----------------------"))

    # Mostrar total a pagar
    total_a_pagar = calcular_total()
    tabla.insert("", "end", values=("Total a pagar", f"{total_a_pagar:.2f}"))

    # Crear botón para volver a hacer otra compra
    def volver_a_comprar():
        tabla.grid_remove()
        boton_volver.grid_remove()
        etiqueta_articulo.grid()
        entrada_articulo.grid()
        etiqueta_precio.grid()
        entrada_precio.grid()
        boton_agregar.grid()
        boton_compra.grid()

    boton_volver = Button(ventana, text="Agregar más productos a la lista", command=volver_a_comprar)
    boton_volver.grid(column=1, row=1)

boton_compra = Button(ventana, text="Mostrar compra", command=mostrar_compra)
boton_compra.grid(column=1, row=3)

ventana.mainloop()

#3.

def main():
    # Lista de asignaturas del curso
    asignaturas = ["Matemáticas", "Física", "Química", "Historia", "Lengua"]

    # Diccionario para almacenar las notas de cada asignatura
    notas = {}

    # Solicitar la nota de cada asignatura al usuario
    for asignatura in asignaturas:
        nota = float(input(f"Ingrese la nota de {asignatura}: "))
        notas[asignatura] = nota

    # Mostrar las notas por pantalla
    print("Notas del curso:")
    for asignatura, nota in notas.items():
        print(f"En {asignatura} has sacado {nota}")

if __name__ == "__main__":
    main()

#4. Explorador de precios de la tienda

from tkinter import *

# Diccionario de precios de productos de una tienda de música
productos = {
    "Amplificador Marshall (A)": 800,
    "Bajo eléctrico Fender Precision (B)": 1200,
    "Batería Pearl (C)": 2000,
    "Guitarra eléctrica Fender Stratocaster (D)": 1500,
    "Micrófono Shure (E)": 300,
    "Piano digital Roland (F)": 1800,
    "Saxofón alto Yamaha (G)": 1500,
    "Set de platillos Zildjian (H)": 500,
    "Teclado Yamaha (I)": 1000,
    "Violín Stradivarius (J)": 3000
}

# Diccionario que mapea letras con productos
letras_productos = {
    "A": "Amplificador Marshall (A)",
    "B": "Bajo eléctrico Fender Precision (B)",
    "C": "Batería Pearl (C)",
    "D": "Guitarra eléctrica Fender Stratocaster (D)",
    "E": "Micrófono Shure (E)",
    "F": "Piano digital Roland (F)",
    "G": "Saxofón alto Yamaha (G)",
    "H": "Set de platillos Zildjian (H)",
    "I": "Teclado Yamaha (I)",
    "J": "Violín Stradivarius (J)"
}

def calcular_precio():
    letra = entry_producto.get().upper()
    cantidad = int(entry_cantidad.get())

    if letra in letras_productos:
        producto = letras_productos[letra]
        precio_unitario = productos[producto]
        precio_total = precio_unitario * cantidad
        resultado_label.config(text=f"El precio total de {cantidad} {producto} es: {precio_total}€", fg="blue")
    else:
        resultado_label.config(text="La letra no coincide con ningún producto", fg="red")

ventana = Tk()
ventana.title("Explorador de Precios de la tienda de musica")

# Instrucción sobre el uso de letras para productos
etiqueta_instruccion = Label(ventana, text="(escribe solo la letra del producto)", fg="black")
etiqueta_instruccion.grid(row=0, column=0, columnspan=2, padx=5, pady=5)

etiqueta_producto = Label(ventana, text="PRODUCTO:", fg="blue")
etiqueta_producto.grid(row=1, column=0, padx=5, pady=5, sticky="e")
entry_producto = Entry(ventana)
entry_producto.grid(row=1, column=1, padx=5, pady=5)

etiqueta_cantidad = Label(ventana, text="CANTIDAD:", fg="blue")
etiqueta_cantidad.grid(row=2, column=0, padx=5, pady=5, sticky="e")
entry_cantidad = Entry(ventana)
entry_cantidad.grid(row=2, column=1, padx=5, pady=5)

boton_calcular = Button(ventana, text="Calcular Precio", command=calcular_precio)
boton_calcular.grid(row=3, column=0, columnspan=2, padx=5, pady=5)

resultado_label = Label(ventana, text="", fg="black")
resultado_label.grid(row=4, column=0, columnspan=2, padx=5, pady=5)

# Estilos para las filas de la tabla
estilos = {
    "par": {"bg": "#CDEBF9"},
    "impar": {"bg": "#BEE7FB"}
}

# Mostrar tabla de productos y precios
row_counter = 5
for i, (producto, precio) in enumerate(productos.items()):
    estilo = estilos["par"] if i % 2 == 0 else estilos["impar"]
    Label(ventana, text=producto, **estilo).grid(row=row_counter, column=0, padx=5, pady=5, sticky="w")
    Label(ventana, text=f"{precio}€", **estilo).grid(row=row_counter, column=1, padx=5, pady=5, sticky="e")
    row_counter += 1

ventana.mainloop()

